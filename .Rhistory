install.packages("KernSmooth")
library(KernSmooth)
install.packages("rattle", repos="http://rattle.togaware.com", type="source")
library(rattle)
rattle()
exit()
install_new<-function(mypkg){
if (mypkg %in% installed.packages()) cat("Package already installed")
else{cat("Package not found, so installing with dependencies...\n
Press CTRL C to abort.")
Sys.sleep(5)
install.packages(mypkg,repos="http://cran.wustl.edu/")
}
}
install_new('plyr')
install_new('lmtest')
install_new('ggplot2')
install_new('gridExtra')
install_new('eeptools')
install_new('stringr')
install_new('knitr')
install_new('quantreg')
install_new('xtable')
install_new('lme4')
install_new('caret')
library(lmtest)
example(gqtest)
library(ggplot2)
y <- rt(200, df = 5)
qplot(sample = y, stat = "qq")
quit()
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", method = "curl")
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", method = "libcurl")
htmlCode = readLines(con)
close(con)
htmlCode
con = ("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
?nchar
nchar(htmlCode[10])
nchar(htmlCode[c(10,20,30,100])
nchar(htmlCode[c(10,20,30,100)]
)
fwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(14, 13, 13, 13, 13))
fwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(14, 13, 13, 13, 13), method = "libcurl")
fwf
fwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(14, 4, 9, 4, 9, 4, 9, 4,9), method = "libcurl")
fwf
fwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(14, 4, 9, 4, 9, 4, 9, 4,9), method = "libcurl")
?read.fwf
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", method = "libcurl")
fwf <- read.fwf(con, c(14, 4, 9, 4, 9, 4, 9, 4,9), method = "libcurl")
fwf <- read.fwf(con, c(14, 4, 9, 4, 9, 4, 9, 4,9))
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", method = "libcurl")
fwf <- read.fwf(con, c(14, 4, 9, 4, 9, 4, 9, 4,9))
fwf
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", method = "libcurl")
htmlCode = readLines(con)
close(con)
htmlCode
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", method = "libcurl")
fwf <- read.fwf(con, c(15, 4, 9, 4, 9, 4, 9, 4,9))
fwf
fwf[,4]
as.numeric(fwf[,4])
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", method = "libcurl")
fwf <- read.fwf(con, c(15, 4, 9, 4, 9, 4, 9, 4,9), colClasses = c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", method = "libcurl")
fwf <- read.fwf(con, c(15, 4, 9, 4, 9, 4, 9, 4,9), stringsAsFactors = FALSE)
as.numeric(fwf[,4])
htmlCode
head(htmlCode)
sum(as.numeric(fwf[,4], na.rm = TRUE)
q
sum(as.numeric(fwf[,4]), na.rm = TRUE)
library(sqldf)
install.packages(c("sqldf", "httpuv"))
library(sqldf)
acs = read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", method = "libcurl")
acs = read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
srtr(acs)
str(acs)
sqldf("select * from acs where AGEP < 50")
sqldf("select pwgtp1 from acs")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select distinct AGEP from acs")
quit()
library(lattice)
library(datasets)
## Simple scatterplot
xyplot(Ozone ~ Wind, data = airquality)
## Convert 'Month' to a factor variable
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2, 1))  ## Plot with 2 panels
## Custom panel function
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
## Custom panel function
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call default panel function
panel.lmline(x, y, col = 2)  ## Overlay a simple linear regression line
})
library(ggplot2)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(displ, hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
setwd("~/Coursera")
?read.csv
?unz
?unzip
?unz
data <- read.csv(unz("activity.csv", "activity.zip"))
setwd("~/github/RepData_PeerAssessment1")
data <- read.csv(unz("activity.csv", "activity.zip"))
data <- read.csv(unz("activity.zip", "activity.csv"))
str(data)
data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("integer", "character", "integer"))
str(data)
?unzip
?unz
data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("integer", "character", "integer"))
data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("integer", "character", "integer"))
?as.Date
data$date = as.Date(data$date, "YYYY-MM-DD")
str(data)
str(data)
library(ggplot2)
qplot(date, steps, data = data)
table(data$date)
?as.Date
data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("integer", "character", "integer"))
data$date = as.Date(data$date, "%Y-%m-%d")
str(data)
table(data$date)
?tapply
s <- split(data, as.factor(data$date))
s
str(s)
lapply(s, mean, na.rm = TRUE)
lapply(s, sum, na.rm = TRUE)
lapply(s, function(d) sum(d$steps, na.rm = TRUE))
lapply(s, function(d) sum(d$steps, na.rm = TRUE), simplify = TRUE)
sapply(s, function(d) sum(d$steps, na.rm = TRUE))
steps_per_day <- sapply(s, function(d) sum(d$steps, na.rm = TRUE))
?hist
hist(steps_per_day)
title("Histogram of total number of steps per day")
hist(steps_per_day, main = "Histogram of total number of steps per day", xlab = "Total number of steps per day")
hist(steps_per_day, main = "Histogram of total number of steps per day", xlab = "Total number of steps per day", col = "gray")
mean(steps_per_day)
median(steps_per_day
)
?print
print(paste0("Mean steps per day :", mean(steps_per_day), " steps"))
printf("Mean steps per day : %f steps", mean(steps_per_day))
?print
?sprintf
sprintf("Mean steps per day : %f steps", mean(steps_per_day))
sprintf("Mean steps per day : %.0f steps", mean(steps_per_day))
sprintf("Median steps per day : %.0f steps", median(steps_per_day))
intervals <- split(data, as.factor(data$interval))
str(intervals)
avg_steps_per_interval <- sapply(intervals, function(i) mean(i$steps, na.rm = TRUE))
avg_steps_per_interval
?strptime
?strptime
data
data$time <- ISOdatetime(0,0,0,data$int %/% 100, data$int %% 100)
data$time <- ISOdatetime(0,0,0,data$int %/% 100, data$int %% 100, 0)
str(data)
?ts
myts <- ts(sapply(s, function(d) sum(d$steps, na.rm = TRUE), start = 0, deltat = 1/24/12)
q
myts <- ts(sapply(s, function(d) sum(d$steps, na.rm = TRUE)), start = 0, deltat = 1/24/12)
myts
myts <- ts(sapply(intervals, function(d) sum(d$steps, na.rm = TRUE)), start = 0, deltat = 1/24/12)
myts
?plot
names(intervals)
plot(names(intervals), intervals, type = "l")
?plot
?xyplot
library(ggplot2)
qplot(steps_per_day)
qplot(steps_per_day, binwidth = 1000)
qplot(steps_per_day, binwidth = 5000)
?hist
hist(steps_per_day,30
main = "Histogram of total number of steps per day",
xlab = "Total number of steps per day", col = "gray")
hist(steps_per_day,30,
main = "Histogram of total number of steps per day",
xlab = "Total number of steps per day", col = "gray")
range(steps_per_day)
hist(steps_per_day,20,
main = "Histogram of total number of steps per day",
xlab = "Total number of steps per day", col = "gray")
?"plot"
plot(myts)
myts <- ts(sapply(intervals, function(d) sum(d$steps, na.rm = TRUE)), start = 0, deltat = 1/12)
plot(myts)
288/12
plot(myts, main = "Average daily activity pattern", xlab = "Time (hour)", ylab = "Average steps"")
q
)
""
plot(myts, main = "Average daily activity pattern", xlab = "Time (hour)", ylab = "Average steps")
max(avg_steps_per_interval)
avg_steps_per_interval
sort(avg_steps_per_interval)
?sort
sort(avg_steps_per_interval)[1]
sort(avg_steps_per_interval, decreasing= TRUE)[1]
sum(is.na(data$steps))
filled_data <- data
data <- read.csv(unz("activity.zip", "activity.csv"),
colClasses = c("factor", "character", "integer"))
str(data)
data <- read.csv(unz("activity.zip", "activity.csv"),
colClasses = c("integer", "character", "factor"))
str(data)
filled_data <- data
x <- filled_data[is.na(data$steps),]
str(x)
filled_data[is.na(data$steps),"steps"] <- 0
str(filled_data)
filled_data <- data
missing <- is.na(data$steps)
missing
table(missing)
str(filled_data)
avg_steps_per_interval[filled_data$interval]
filled_data[is.na(data$steps),"steps"] <- avg_steps_per_interval[data$interval]
filled_data <- data
filled_data$avg_steps <- avg_steps_per_interval[data$interval]
head(filled_data)
head(filled_data, 288)
avg_steps_per_interval
data$interval
avg_steps_per_interval[data$interval]
head(avg_steps_per_interval[data$interval])
head(avg_steps_per_interval[0,1,2]
)
avg_steps_per_interval[0,1,2]
avg_steps_per_interval[c(0,1,2)]
avg_steps_per_interval[c(1,2, 3)]
avg_steps_per_interval[as.character(data$interval)]
head(avg_steps_per_interval[as.character(data$interval)])
head(avg_steps_per_interval)
filled_data <- data
filled_data$avg_steps <- avg_steps_per_interval[as.character(data$interval)]
head(filled_data$avg_steps)
filled_data[is.na(data$steps),"steps"] <- filled_data[is.na(data$steps),"avg_steps"]
str(filled_data)
median_steps <- sapply(intervals, function(i) median(i$steps, na.rm = TRUE))
head(median_steps
)
median_steps
median_steps
filled_data <- data
filled_data$median_steps <- median_steps[as.character(data$interval)]
filled_data[is.na(data$steps),"steps"] <- filled_data[is.na(data$steps),"median_steps"]
str(filled_data)
range(steps_per_day)
range(steps_per_day)[1]/1000
range(steps_per_day)[2]/1000
range(steps_per_day)[2] %/% 1000
?hist
filled_data <- data
filled_data$median_steps <- median_steps[as.character(data$interval)]
filled_data[is.na(data$steps),"steps"] <- filled_data[is.na(data$steps),"median_steps"]
filled_s <- split(filled_data, as.factor(filled_data$date))
filled_steps_per_day <- sapply(filled_s, function(d) sum(d$steps, na.rm = TRUE))
filled_steps_per_day
str(data)
?weekdays
head(weekdays(data$date))
head(weekdays(data[1]$date))
head(weekdays(data[1,]$date))
str(data)
head(weekdays(as.Date(data$date, "%Y-%m-%d"))
)
data$date_asDate <- as.Date(data$date, "%Y-%m-%d")
head(weekdays(data$date_asDate, "%Y-%m-%d"))
head(weekdays(data$date_asDate)
)
head(weekdays(data$date_asDate))
table(weekdays(data$date_asDate))
day_type = (Sunday = "weekend", Monday = "weekday", Tueday = "weekday", Wednesday = "weekday", Thursday = "weekday", Friday = "weekday", Saturday = "weekend")
day_type = c(Sunday = "weekend", Monday = "weekday", Tueday = "weekday", Wednesday = "weekday", Thursday = "weekday", Friday = "weekday", Saturday = "weekend")
day_type
data$day_type <- as.factor(day_type[as.character(weekdays(data$data_asDate))])
data$day_type <- as.factor(day_type[as.character(weekdays(data$date_asDate))])
str(data)
weekday_ts <- ts(sapply(split(data[data$day_type == "weekday"], data$interval),
function(i) mean(i$steps, na.rm = TRUE)),
start = 0,
deltat = 1/12)
str(data)
weekday_ts <- ts(sapply(split(data[data$day_type == "weekday",], data$interval),
function(i) mean(i$steps, na.rm = TRUE)),
start = 0,
deltat = 1/12)
data_weekday <- data[data$day_type == "weekday",]
weekday_ts <- ts(sapply(split(data_weekday, data_weekday$interval),
function(i) mean(i$steps, na.rm = TRUE)),
start = 0,
deltat = 1/12)
str(weekday_ts)
?plot
library(lattice)
?xyplot
xyplot(steps ~ interval, data)
xyplot(mean(steps) ~ interval, data)
?xyplot
str(data)
data$time_hour <- (data$interval %/% 100) + ((data$interval) %% 100) / 60
data$time_hour <- as.numeric(data$interval)
data$time_hour <- (data$time_hour %/% 100) + (data$time_hour %% 100) / 60
str(data)
head(data)
data$time_hour <- (as.numeric(data$interval) %/% 100) + (as.numeric(data$interval) %% 100) / 60
head(data)
as.numeric(data$interval)
levels(data$interval)
data$time_hour <- (levels(data$interval) %/% 100) + (levels(data$interval) %% 100) / 60
x <- as.numeric(levels(data$interval))
data$time_hour <- (x %/% 100) + (x %% 100) / 60
str(data)
head(data)
head(x)
x <- as.numeric(levels(data$interval)[data$interval])
head(x)
data$time_hour <- (x %/% 100) + (x %% 100) / 60
str(data)
head(data)
xyplot(time_hour, steps, data)
xyplot(time_hour ~ steps, data)
xyplot(steps ~ time_hour, data)
data <- read.csv(unz("activity.zip", "activity.csv"),
colClasses = c("integer", "character", "integer"))
data$date_asDate <- as.Date(data$date, "%Y-%m-%d")
date$time_hour <- (date$interval %/% 100) + (date$interval %% 100) / 60
str(data)
data$date_asDate <- as.Date(data$date, "%Y-%m-%d")
data$time_hour <- (date$interval %/% 100) + (date$interval %% 100) / 60
str(data)
data$date_asDate <- as.Date(data$date, "%Y-%m-%d")
data$time_hour <- (data$interval %/% 100) + (data$interval %% 100) / 60
str(data)
?split
day_type = c(Sunday = "weekend",
Monday = "weekday",
Tueday = "weekday",
Wednesday = "weekday",
Thursday = "weekday",
Friday = "weekday",
Saturday = "weekend")
data$day_type <- as.factor(day_type[as.character(weekdays(data$date_asDate))])
head(data)
data
table(data$date,data$day_type)
Tuesday = "weekday",
day_type = c(Sunday = "weekend",
Monday = "weekday",
Tuesday = "weekday",
Wednesday = "weekday",
Thursday = "weekday",
Friday = "weekday",
Saturday = "weekend")
data$day_type <- as.factor(day_type[as.character(weekdays(data$date_asDate))])
table(data$date,data$day_type)
?aggregate
aggregate(data, interval, mean)
aggregate(data, data$interval, mean)
?xtabs
aggregate(interval ~ ., data = data, mean
)
x <- aggregate(interval ~ ., data = data, mean)
str(x)
x <- aggregate(data, by = list(steps, hour_time), FUN=mean, na.rm = TRUE)
x <- aggregate(data, by = list(day_type, hour_time), FUN=mean, na.rm = TRUE)
x <- aggregate(data, by = list(day_type, interval), FUN=mean, na.rm = TRUE)
x <- aggregate(data, by = list(day_type, date), FUN=mean, na.rm = TRUE)
attach(mtcars)
aggdata <-aggregate(mtcars, by=list(cyl,vs),
FUN=mean, na.rm=TRUE)
print(aggdata)
detach(mtcars)
str(mtcars)
attach(data)
detach(data)
x <- aggregate(data, by = list(data$interval, data$day_type), FUN=mean, na.rm = TRUE)
str(x)
x
xyplot(time_hour ~ steps, x)
xyplot(time_hour ~ steps | Group.2, x)
xyplot(time_hour ~ steps | Group.2, x, type = "l")
xyplot(steps ~ time_hour | Group.2, x, type = "l")
avg_steps <- aggregate(data[,"interval", "hour_time", "steps"]), by = list(data$interval), FUN=mean, na.rm = TRUE
avg_steps <- aggregate(data[,c("interval", "hour_time", "steps")]), by = list(data$interval), FUN=mean, na.rm = TRUE
avg_steps <- aggregate(data[,c("interval", "hour_time", "steps")], by = list(data$interval), FUN=mean, na.rm = TRUE
)
avg_steps <- aggregate(data[,c("hour_time", "steps")], by = list(data$interval), FUN = mean, na.rm = TRUE)
str(data)
avg_steps <- aggregate(data[,c("time_hour", "steps")], by = list(data$interval), FUN = mean, na.rm = TRUE)
str(avg_steps)
xyplot(steps ~ time_hour, avg_steps, type = "l")
avg_steps <- aggregate(data[,c("date_asDate", "steps")], by = list(data$date), FUN = mean, na.rm = TRUE)
avg_steps
hist(avg_steps$steps
)
total_steps <- aggregate(data[,c("date_asDate", "steps")], by = list(data$date), FUN = sum, na.rm = TRUE)
total_steps <- aggregate(data[,"steps"], by = list(data$date), FUN = sum, na.rm = TRUE)
total_steps
hist(total_steps)
hist(total_steps$steps)
total_steps <- aggregate(data[,"steps"], by = list(data$date), FUN = sum, na.rm = TRUE)
str(total_steps)
hist(total_steps$x)
hist(total_steps$x, breaks = 21)
steps_per_day
total_steps
total_steps$x
avg_steps <- aggregate(data[,c("time_hour", "steps")], by = list(data$interval), FUN = mean, na.rm = TRUE)
avg_steps <- aggregate(data[,c("time_hour", "steps")], by = list(data$interval), FUN = mean, na.rm = TRUE)
xyplot(steps ~ time_hour, avg_steps, type = "l")
?order
head(avg_steps[order(avg_steps$steps, decreasing = TRUE)], 1)
head(avg_steps[order(avg_steps$steps, decreasing = TRUE),], 1)
?xyplot
avg_steps <- aggregate(data[,c("time_hour", "steps")], by = list(data$interval), FUN = mean, na.rm = TRUE)
str(avg_steps)
xyplot(steps ~ time_hour, avg_steps, type = "l")
x <- aggregate(data, by = list(data$interval, data$day_type), FUN=mean, na.rm = TRUE)
xyplot(time_hour ~ steps, x)
xyplot(steps ~ time_hour | Group.2, x, type = "l")
avg_steps_bydaytype <- aggregate(filled_data[,c("time_hour", "steps")],
by = list(data$interval, data$day_type),
FUN = mean,
na.rm = TRUE)
str(filled_data)
avg_steps_bydaytype <- aggregate(filled_data[,c("time_hour", "steps")],
by = list(filled_data$interval, filled_data$day_type),
FUN = mean,
na.rm = TRUE)
filled_data <- data
filled_data$median_steps <- median_steps[as.character(data$interval)]
filled_data[is.na(data$steps),"steps"] <- filled_data[is.na(data$steps),"median_steps"]
str(filled_data)
avg_steps_bydaytype <- aggregate(filled_data[,c("time_hour", "steps")],
by = list(filled_data$interval, filled_data$day_type),
FUN = mean,
na.rm = TRUE)
xyplot(steps ~ time_hour | day_type, avg_steps_bydaytype)
xyplot(steps ~ time_hour | day_type, avg_steps_bydaytype, type = "l")
xyplot(steps ~ time_hour | Group.2, avg_steps_bydaytype, type = "l")
weekdays(data$date_asDate)
as.factor(day_type[as.character(weekdays(data$date_asDate))])
as.factor(day_type[weekdays(data$date_asDate)])
?xyplot
